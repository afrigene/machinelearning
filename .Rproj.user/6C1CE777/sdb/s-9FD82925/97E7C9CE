{
    "contents" : "library(caret)\nlibrary(data.table)\n\npredictors <- c( \"user_name\", \"num_window\", \n                 \"roll_belt\", \"pitch_belt\",\"yaw_belt\",\"total_accel_belt\",\n                 \"gyros_belt_x\",\"gyros_belt_y\",\"gyros_belt_z\",\n                 \"accel_belt_x\",\"accel_belt_y\",\"accel_belt_z\",\n                 \"magnet_belt_x\",\"magnet_belt_y\",\"magnet_belt_z\",\n                 \"roll_arm\",\t\"pitch_arm\", \"yaw_arm\",\t\"total_accel_arm\",\n                 \"gyros_arm_x\", \"gyros_arm_y\",\t\"gyros_arm_z\",\t\n                 \"accel_arm_x\",\t\"accel_arm_y\",\t\"accel_arm_z\",\t\n                 \"magnet_arm_x\",\t\"magnet_arm_y\",\t\"magnet_arm_z\",\n                 \"roll_dumbbell\", \"pitch_dumbbell\",\t\"yaw_dumbbell\", \"total_accel_dumbbell\",\n                 \"gyros_dumbbell_x\",\"gyros_dumbbell_y\",\t\"gyros_dumbbell_z\",\t\n                 \"accel_dumbbell_x\",\t\"accel_dumbbell_y\",\t\"accel_dumbbell_z\",\t\n                 \"magnet_dumbbell_x\",\t\"magnet_dumbbell_y\",\"magnet_dumbbell_z\",\n                 \"roll_forearm\", \"pitch_forearm\",\t\"yaw_forearm\", \"total_accel_forearm\",\n                 \"gyros_forearm_x\", \"gyros_forearm_y\", \"gyros_forearm_z\",\n                 \"accel_forearm_x\", \"accel_forearm_y\", \"accel_forearm_z\",\t\n                 \"magnet_forearm_x\",\t\"magnet_forearm_y\",\t\"magnet_forearm_z\"\n                )\n\n# Pre-process the data by centering, scaling and imputing missing values\npreprocess <- function(data, train=TRUE)\n{\n  data <- data.table(data)\n  \n  if (train)\n  {\n    data <- data[,lapply(.SD, mean), by = list(user_name, num_window, target)]\n    vars <- data[,colnames(data)[4:ncol(data)], with=FALSE]\n    \n  } else {\n    \n    data <- data[,lapply(.SD, mean), by = list(user_name, num_window)]\n    vars <- data[,colnames(data)[3:ncol(data)], with=FALSE]\n  }\n  \n  # center and scale variables\n  preProcValues <- preProcess(vars, method = c(\"center\", \"scale\", \"medianImpute\"))\n  result <- predict(preProcValues, vars)\n  \n  if (train)\n  {\n    result <- data.frame(data$target, result)\n    \n    colnames(result)[1] <- \"target\"  \n  }\n  result\n}\n\n\n# Read training data\ndata <- read.csv(file=\"pml-training.csv\", header=TRUE, )\n\n# Partition data in TRAIN and TEST sets\ninTrain <- createDataPartition(y=data$classe, p=0.7, list=FALSE)\ntraining <- data[inTrain,]\ntesting <- data[-inTrain,]\n\n\n# Generate model on TRAIN data\n#########################################\ntrain_data <- preprocess(data.frame(training[,predictors], target=training$classe), train=TRUE)\nmodelFit <- train(target ~ ., data=train_data, method=\"rf\")\n\n# calculate in sample error\npredictions <- predict(modelFit, newdata = train_data)\nconfusionMatrix(predictions, train_data$target)\n\n\n# Evaluate model on TEST data\n#########################################\ntest_data <- preprocess(data.frame(testing[,predictors], target=testing$classe), train=TRUE)\n\n# calculate out of sample error\npredictions <- predict(modelFit, newdata = test_data)\nconfusionMatrix(predictions, test_data$target)\n\n\n# Apply model to HOLDOUT data\n########################################\nholdout <- read.csv(file=\"pml-testing.csv\", header=TRUE, )\nholdout_data <- preprocess(holdout[,predictors], train=FALSE)\nanswers <- predict(modelFit, newdata = holdout_data)\n\n\npml_write_files = function(x){\n  n = length(x)\n  for(i in 1:n){\n    filename = paste0(\"problem_id_\",i,\".txt\")\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n  }\n}\n\npml_write_files(answers)\n",
    "created" : 1440177085033.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2286395759",
    "id" : "97E7C9CE",
    "lastKnownWriteTime" : 1440200534,
    "path" : "~/Classes/Machine Learning/project.R",
    "project_path" : "project.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}