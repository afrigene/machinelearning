qplot(age,wage, colour=education, data=training)
qplot(age,wage, colour=education, data=training) + geom_smooth(method="lm", formula=y~x)
qplot(wage, colour=education, data=training, geom="density")
names(mixtures)
names(training)
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
names(training)
qplot(CompressiveStrength, colour=Superplasticizer, data=training, geom="density")
training = mixtures[ inTrain,]
qplot(CompressiveStrength, colour=Superplasticizer, data=training, geom="density")
dim(testing)
hist(testing$Superplasticizer)
qplot(CompressiveStrength, colour=Superplasticizer, data=training, geom="density")
qplot(CompressiveStrength, colour=Superplasticizer, data=mixtures, geom="density")
hist(testing$Superplasticizer)
hist(log(testing$Superplasticizer)
hist(log(testing$Superplasticizer))
min(testing$Superplasticizer)
max(testing$Superplasticizer)
log(0)
max(mixtures$Superplasticizer)
min(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
x <- mixtures$Superplasticizer
y <- log(x)
dataframe(x,y)
data.frame(x,y)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
dim(testing)
names(training)
x <- names(training)
x
names(x)
x
x[colnames(x) %like% 'IL',]
colnames(x)
x
mixtures
names(training)
training <- data.table(training)
library(datatable)
library(data.table)
training <- data.table(training)
colnames(training)
colnames(training) %like% 'IL'
colnames(training)[colnames(training) %like% 'IL']
IL_predictors <- colnames(training)[colnames(training) %like% 'IL']
IL_predictors
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_predictors <- colnames(training)[colnames(training) %like% 'IL']
training(c("IL_11"))
training[c("IL_11")]
training[IL_predictors]
library(AppliedPredictiveModeling)
library(data.table)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
mean(training$Superplasticizer)
mean(training$CompressiveStrength)
preProcess(training$CompressiveStrength, method=c("center", "scale"))
preObje <- preProcess(training[,-6], method=c("center", "scale"))
trainCS <- predict(preObje, training[,-6])$CompressiveStrength
mean(trainCS)
preObj <- preProcess(training[,-6], method=c("center", "scale"))
trainCS <- predict(preObj, training[,-6])$CompressiveStrength
mean(trainCS)
mean(training[,6])
mean(trainCS)
mean(training$CompressiveStrength)
mean(training[,7])
mean(training[,5])
mean(training)
mean(training[,])
training$CompressiveStrength[1:4]
training[1:4]
training[,1:4]
training[,1:2]
training[,6]
training[1:3,6]
training[1:3,]
training[1:3,1]
training[1:3,8]
training[1:3,9]
mean(training[,9])
preObj <- preProcess(training[,-9], method=c("center", "scale"))
trainCS <- predict(preObj, training[,-9])$CompressiveStrength
mean(training[,9])
mean(trainCS)
preObj <- preProcess(training[,-9], method=c("center", "scale"))
trainCS <- predict(preObj, training[,-9])$CompressiveStrength
mean(training[,9])
mean(trainCS)
trainCS
library(kernlab)
library(ggplot2)
data(spam)
spam$capitalAve
library(ISLR)
data(Wage)
summary(Wage)
table(training$jobclass)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
set.seed(32376)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_predictors <- colnames(training)[colnames(training) %like% 'IL']
preObj <- preProcess(IL_predictors, method=c("pca"))
dim(IL_predictors)
IL_predictors
training[IL_predictors]
preObj <- preProcess(training[IL_predictors], method=c("pca"))
preObj
?trainControl
preObj <- preProcess(training[IL_predictors], method=c("pca"), thresh=0.8)
preObj
trainingIL <- training[IL_predictors]
dim(trainingIL)
names(predictors)
adData = data.frame(diagnosis,predictors[IL_predictors])
names(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
modelFit <- train(type ~., data=training, method="glm")
predictions <- predict(modelFit, newdata = testing)
modelFit <- train(diagnosis ~., data=training, method="glm")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
IL_predictors <- colnames(predictors)[colnames(predictors) %like% 'IL']
IL_predictors
predictors[grep("IL", colnames(predictors)), ]
predictors[grep("IL", colnames(predictors)), ]
predictors[grep("IL", colnames(predictors)), ]
predictors[grep("IL", colnames(predictors)), ]
names(predictors)
grep("IL", colnames(predictors))
colnames(predictors)[grep("IL", colnames(predictors))]
colnames(predictors)[grep("^IL", colnames(predictors))]
IL_predictors <- colnames(predictors)[grep("^IL", colnames(predictors))]
adData = data.frame(diagnosis,predictors[IL_predictors])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis ~., data=training, method="glm")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
names(adData)
preObj <- preProcess(training[IL_predictors], method=c("pca"), thresh=0.8)
preObj
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
IL_predictors <- colnames(predictors)[grep("^IL", colnames(predictors))]
IL_predictors
adData = data.frame(diagnosis,predictors[IL_predictors])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis ~., data=training, method="glm")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
source('~/Classes/Machine Learning/quiz2.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
names(segmentationOriginal)
set.seed(3433)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(125)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit <- train(Case ~ ., method="rpart", data=training)
modFit <- train(case ~ ., method="rpart", data=training)
names(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
set.seed(125 )
inTrain = createDataPartition(segmentationOriginal$Case, p = 0.7)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit <- train(case ~ ., method="rpart", data=training)
inTrain = createDataPartition(segmentationOriginal$Case, p = 0.7)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
modFit <- train(case ~ ., method="rpart", data=training)
modFit <- train(Case ~ ., method="rpart", data=training)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
predictions <- predict(modelFit, newdata = testing)
modelFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
predictions <- predict(modelFit, newdata = testing)
predictions
training$Case
segmentationOriginal$Case
print(modFit$finalModel)
data(segmentationOriginal)
set.seed(125 )
inTrain = createDataPartition(segmentationOriginal$Case, p = 0.7)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
modelFit <- train(Case ~ ., method="rpart", data=training)
inTrain$Case
training$Case
training = segmentationOriginal[ Case=="Train",]
segmentationOriginal <- data.table(segmentationOriginal)
library(data.table)
segmentationOriginal <- data.table(segmentationOriginal)
training = segmentationOriginal[ Case=="Train",]
inTrain = createDataPartition$Case
inTrain <- createDataPartition$Case
data(segmentationOriginal)
set.seed(125 )
inTrain <- segmentationOriginal$Case
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
training$Case
inTrain
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
inTrain
segmentationOriginal <- data.table(data(segmentationOriginal))
set.seed(125 )
training = segmentationOriginal[ Case=="Train",]
training <- segmentationOriginal[ Case=="Train",]
segmentationOriginal <- data.table(data(segmentationOriginal))
names(segmentationOriginal)
data(segmentationOriginal)
set.seed(125 )
segmentationOriginal <- data.table(segmentationOriginal)
names(segmentationOriginal)
training <- segmentationOriginal[ Case=="Train",]
training$Case
testing <- segmentationOriginal[ Case=="Test",]
testing$Case
table(training$Case)
table(testing$Case)
modelFit <- train(Case ~ ., method="rpart", data=training)
training <- segmentationOriginal[ Case=="Train",]
testing <- segmentationOriginal[ Case=="Test",]
names(segmentationOriginal)
str(segmentationOriginal)
modelFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
print(modelFit$finalModel)
plot(modelFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modelFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
predictions <- predict(modelFit, newdata = testing)
predictions
testing$predict <- predict(modelFit, newdata = testing)
class(testing)
testing[TotalIntench2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1 == 2]$predict
names(testing)
testing[TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1 == 2,]$predict
testing[TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1 == 2,]
testing$TotalIntenCh2
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Class)
dim(training)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
names(olive)
str(olive$Area)
olive$Area
data(olive)
names(olive)
olive$Region
qplot(Region, Area,data=olive)
olive = olive[,-1]
inTrain = createDataPartition(olive$Area, p = 3/4)[[1]]
inTrain
training = olive[ inTrain,]
testing = olive[-inTrain,]
dim(training)
dim (testing)
modelFit <- train(Class ~ ., method="rpart", data=training)
modelFit <- train(Area ~ ., method="rpart", data=training)
print(modelFit$finalModel)
fancyRpartPlot(modelFit$finalModel)
data(olive)
olive = olive[,-1]
modelFit <- train(Area ~ ., method="rpart", data=olive)
fancyRpartPlot(modelFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
names(newdata)
newdata
predict(modelFit, newdata = newdtaa)
predict(modelFit, newdata = newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family= binomial(), method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(), method="glm", data=trainSA)
trainSA = SAheart[train,]
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(), method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, method="glm", data=trainSA)
str(trainSA$chd)
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(), method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(), method="glm.fit", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(), method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial(link = "logit"), method="glm", data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
trControl=trainControl(method = "none")
data=trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
trControl=trainControl(method = "none"),
data=trainSA)
str(trainSA$chd)
trainSA$chd
class(trainSA$chd)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train$chd <- factor(train$chd)
train$chd <- as.factor(train$chd)
?as.factor
train$chd <- factor(train$chd)
data(SAheart)
set.seed(8484)
SAheart$chd <- factor(SAheart$chd)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
trControl=trainControl(method = "none"),
data=trainSA)
predictions <- predict(modelFit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predictions)
missClass(testSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = trainSA)
missClass(trainSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
missClass(testSA$chd, as.numeric(predictions))
data(SAheart)
set.seed(8484)
SAheart$chd <- factor(SAheart$chd)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
trControl=trainControl(method = "none"),
data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictions <- predict(modelFit, newdata = trainSA)
missClass(trainSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
missClass(testSA$chd, as.numeric(predictions))
testSA$chd
predictions
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
data=trainSA)
predictions <- predict(modelFit, newdata = trainSA)
missClass(trainSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
missClass(testSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = trainSA)
1 - missClass(trainSA$chd, as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
1 - missClass(testSA$chd, as.numeric(predictions))
length(trainSA$chd)
predictions < 0
predictions <- predict(modelFit, newdata = trainSA)
predictions
predictions > 0.5
predictions <- predict(modelFit, newdata = trainSA)
1 - missClass(as.numeric(trainSA$chd), as.numeric(predictions))
predictions <- predict(modelFit, newdata = trainSA)
missClass(as.numeric(trainSA$chd), as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
missClass(as.numeric(testSA$chd), as.numeric(predictions))
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictions <- predict(modelFit, newdata = trainSA)
missClass(as.numeric(trainSA$chd), as.numeric(predictions))
predictions <- predict(modelFit, newdata = testSA)
missClass(as.numeric(testSA$chd), as.numeric(predictions))
(prediction > 0.5)*1
(predictions > 0.5)*1
predictions
as.numeric(predictions)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family=binomial(),
method="glm",
data=trainSA)
trainSA$chd
class(trainSA$chd)
data(SAheart)
set.seed(8484)
SAheart$chd <- factor(SAheart$chd)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
class(trainSA$chd)
as.numeric(testSA$chd)
as.boolean(testSA$chd)
as.numeric(as.character(testSA$chd))
predictions <- predict(modelFit, newdata = trainSA)
missClass(as.numeric(as.character(trainSA$chd)), as.numeric(as.character(predictions)))
predictions <- predict(modelFit, newdata = testSA)
missClass(as.numeric(as.character(testSA$chd)), as.numeric(as.character(predictions)))
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
class(vowel.train$y)
vowel.train.y <- factor(vowel.train.y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
class(vowel.train$y)
modelFit <- train(y ~ .,method="rf", data=vowel.train)
modelFit <- train(y ~ .,method="rf", data=vowel.train)
?varImp
varImp(modelFit)
set.seed(33833)
modelFit <- train(y ~ .,method="rf", data=vowel.train)
varImp(modelFit)
library(data.table)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
set.seed(125 )
segmentationOriginal <- data.table(segmentationOriginal)
training <- segmentationOriginal[ Case=="Train",]
testing <- segmentationOriginal[ Case=="Test",]
modelFit <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(modelFit$finalModel)
source('~/Classes/Machine Learning/quiz2.R')
?read.csv
read.csv(file="pml-training.csv", header=TRUE)
testing <- read.csv(file="pml-training.csv", header=TRUE)
dim(testing)
str(testing)
View(testing)
testing <- read.csv(file="pml-training.csv", header=TRUE, numerals="no.loss")
str(testing)
source('~/Classes/Machine Learning/quiz2.R')
